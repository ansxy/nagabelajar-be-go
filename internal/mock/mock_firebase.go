// Code generated by MockGen. DO NOT EDIT.
// Source: firebase.go
//
// Generated by this command:
//
//	mockgen -destination=../mock/mock_firebase.go -package=mock_repo -source=firebase.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	io "io"
	multipart "mime/multipart"
	reflect "reflect"

	auth "firebase.google.com/go/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockIFaceFCM is a mock of IFaceFCM interface.
type MockIFaceFCM struct {
	ctrl     *gomock.Controller
	recorder *MockIFaceFCMMockRecorder
}

// MockIFaceFCMMockRecorder is the mock recorder for MockIFaceFCM.
type MockIFaceFCMMockRecorder struct {
	mock *MockIFaceFCM
}

// NewMockIFaceFCM creates a new mock instance.
func NewMockIFaceFCM(ctrl *gomock.Controller) *MockIFaceFCM {
	mock := &MockIFaceFCM{ctrl: ctrl}
	mock.recorder = &MockIFaceFCMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFaceFCM) EXPECT() *MockIFaceFCMMockRecorder {
	return m.recorder
}

// GetMd5Hash mocks base method.
func (m *MockIFaceFCM) GetMd5Hash(ctx context.Context, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMd5Hash", ctx, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMd5Hash indicates an expected call of GetMd5Hash.
func (mr *MockIFaceFCMMockRecorder) GetMd5Hash(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMd5Hash", reflect.TypeOf((*MockIFaceFCM)(nil).GetMd5Hash), ctx, fileName)
}

// GetOneFile mocks base method.
func (m *MockIFaceFCM) GetOneFile(ctx context.Context, fileName string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneFile", ctx, fileName)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneFile indicates an expected call of GetOneFile.
func (mr *MockIFaceFCMMockRecorder) GetOneFile(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneFile", reflect.TypeOf((*MockIFaceFCM)(nil).GetOneFile), ctx, fileName)
}

// UploudFile mocks base method.
func (m *MockIFaceFCM) UploudFile(ctx context.Context, file *multipart.FileHeader, fileReader io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploudFile", ctx, file, fileReader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploudFile indicates an expected call of UploudFile.
func (mr *MockIFaceFCMMockRecorder) UploudFile(ctx, file, fileReader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploudFile", reflect.TypeOf((*MockIFaceFCM)(nil).UploudFile), ctx, file, fileReader)
}

// VerifiyToken mocks base method.
func (m *MockIFaceFCM) VerifiyToken(ctx context.Context, token string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiyToken", ctx, token)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifiyToken indicates an expected call of VerifiyToken.
func (mr *MockIFaceFCMMockRecorder) VerifiyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiyToken", reflect.TypeOf((*MockIFaceFCM)(nil).VerifiyToken), ctx, token)
}
