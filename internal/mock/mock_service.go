// Code generated by MockGen. DO NOT EDIT.
// Source: service_interface.go
//
// Generated by this command:
//
//	mockgen -destination=../mock/mock_service.go -package=mock_repo -source=service_interface.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	constant "github.com/ansxy/nagabelajar-be-go/pkg/constant"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// CertificatePDF mocks base method.
func (m *MockIService) CertificatePDF(ctx context.Context, typeTransaction *types.Transaction, pdfData constant.CertificatePDF, address common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatePDF", ctx, typeTransaction, pdfData, address)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertificatePDF indicates an expected call of CertificatePDF.
func (mr *MockIServiceMockRecorder) CertificatePDF(ctx, typeTransaction, pdfData, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatePDF", reflect.TypeOf((*MockIService)(nil).CertificatePDF), ctx, typeTransaction, pdfData, address)
}

// CreateCertificate mocks base method.
func (m *MockIService) CreateCertificate(ctx context.Context, opts *bind.TransactOpts, _recipientName, _recipientEmail, _courseName, _courseCode string) (*common.Address, *types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", ctx, opts, _recipientName, _recipientEmail, _courseName, _courseCode)
	ret0, _ := ret[0].(*common.Address)
	ret1, _ := ret[1].(*types.Transaction)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockIServiceMockRecorder) CreateCertificate(ctx, opts, _recipientName, _recipientEmail, _courseName, _courseCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockIService)(nil).CreateCertificate), ctx, opts, _recipientName, _recipientEmail, _courseName, _courseCode)
}

// GeneratePDFFromHtml mocks base method.
func (m *MockIService) GeneratePDFFromHtml(html string, width, heigth float64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePDFFromHtml", html, width, heigth)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePDFFromHtml indicates an expected call of GeneratePDFFromHtml.
func (mr *MockIServiceMockRecorder) GeneratePDFFromHtml(html, width, heigth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePDFFromHtml", reflect.TypeOf((*MockIService)(nil).GeneratePDFFromHtml), html, width, heigth)
}

// GetMd5Hash mocks base method.
func (m *MockIService) GetMd5Hash(ctx context.Context, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMd5Hash", ctx, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMd5Hash indicates an expected call of GetMd5Hash.
func (mr *MockIServiceMockRecorder) GetMd5Hash(ctx, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMd5Hash", reflect.TypeOf((*MockIService)(nil).GetMd5Hash), ctx, filename)
}

// Md5Reader mocks base method.
func (m *MockIService) Md5Reader(ctx context.Context, fileName string, buf []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Md5Reader", ctx, fileName, buf)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Md5Reader indicates an expected call of Md5Reader.
func (mr *MockIServiceMockRecorder) Md5Reader(ctx, fileName, buf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Md5Reader", reflect.TypeOf((*MockIService)(nil).Md5Reader), ctx, fileName, buf)
}

// ParseTemplateHTML mocks base method.
func (m *MockIService) ParseTemplateHTML(templateName string, data map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTemplateHTML", templateName, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemplateHTML indicates an expected call of ParseTemplateHTML.
func (mr *MockIServiceMockRecorder) ParseTemplateHTML(templateName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemplateHTML", reflect.TypeOf((*MockIService)(nil).ParseTemplateHTML), templateName, data)
}

// QRCodeGenerator mocks base method.
func (m *MockIService) QRCodeGenerator(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QRCodeGenerator", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QRCodeGenerator indicates an expected call of QRCodeGenerator.
func (mr *MockIServiceMockRecorder) QRCodeGenerator(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QRCodeGenerator", reflect.TypeOf((*MockIService)(nil).QRCodeGenerator), text)
}

// UpdateMd5Certificate mocks base method.
func (m *MockIService) UpdateMd5Certificate(ctx context.Context, opts *bind.TransactOpts, fileName *common.Address, md5Hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMd5Certificate", ctx, opts, fileName, md5Hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMd5Certificate indicates an expected call of UpdateMd5Certificate.
func (mr *MockIServiceMockRecorder) UpdateMd5Certificate(ctx, opts, fileName, md5Hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMd5Certificate", reflect.TypeOf((*MockIService)(nil).UpdateMd5Certificate), ctx, opts, fileName, md5Hash)
}

// UploudFile mocks base method.
func (m *MockIService) UploudFile(ctx context.Context, file []byte, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploudFile", ctx, file, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploudFile indicates an expected call of UploudFile.
func (mr *MockIServiceMockRecorder) UploudFile(ctx, file, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploudFile", reflect.TypeOf((*MockIService)(nil).UploudFile), ctx, file, filename)
}
