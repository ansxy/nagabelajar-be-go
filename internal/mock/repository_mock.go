// Code generated by MockGen. DO NOT EDIT.
// Source: repo_interface.go
//
// Generated by this command:
//
//	mockgen -destination=../mock/repository_mock.go -package=mock_repo -source=repo_interface.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	model "github.com/ansxy/nagabelajar-be-go/internal/model"
	request "github.com/ansxy/nagabelajar-be-go/internal/request"
	gomock "go.uber.org/mock/gomock"
)

// MockIFaceRepository is a mock of IFaceRepository interface.
type MockIFaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFaceRepositoryMockRecorder
}

// MockIFaceRepositoryMockRecorder is the mock recorder for MockIFaceRepository.
type MockIFaceRepositoryMockRecorder struct {
	mock *MockIFaceRepository
}

// NewMockIFaceRepository creates a new mock instance.
func NewMockIFaceRepository(ctrl *gomock.Controller) *MockIFaceRepository {
	mock := &MockIFaceRepository{ctrl: ctrl}
	mock.recorder = &MockIFaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFaceRepository) EXPECT() *MockIFaceRepositoryMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockIFaceRepository) CreateCategory(ctx context.Context, data *model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockIFaceRepositoryMockRecorder) CreateCategory(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockIFaceRepository)(nil).CreateCategory), ctx, data)
}

// CreateCertificate mocks base method.
func (m *MockIFaceRepository) CreateCertificate(ctx context.Context, data *model.Certificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockIFaceRepositoryMockRecorder) CreateCertificate(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockIFaceRepository)(nil).CreateCertificate), ctx, data)
}

// CreateCourse mocks base method.
func (m *MockIFaceRepository) CreateCourse(ctx context.Context, data *model.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockIFaceRepositoryMockRecorder) CreateCourse(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockIFaceRepository)(nil).CreateCourse), ctx, data)
}

// CreateTransaction mocks base method.
func (m *MockIFaceRepository) CreateTransaction(ctx context.Context, data *model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIFaceRepositoryMockRecorder) CreateTransaction(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIFaceRepository)(nil).CreateTransaction), ctx, data)
}

// CreateUser mocks base method.
func (m *MockIFaceRepository) CreateUser(ctx context.Context, data *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIFaceRepositoryMockRecorder) CreateUser(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIFaceRepository)(nil).CreateUser), ctx, data)
}

// DeleteOneCategory mocks base method.
func (m *MockIFaceRepository) DeleteOneCategory(ctx context.Context, categoryID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneCategory", ctx, categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneCategory indicates an expected call of DeleteOneCategory.
func (mr *MockIFaceRepositoryMockRecorder) DeleteOneCategory(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneCategory", reflect.TypeOf((*MockIFaceRepository)(nil).DeleteOneCategory), ctx, categoryID)
}

// DeleteOneCourse mocks base method.
func (m *MockIFaceRepository) DeleteOneCourse(ctx context.Context, courseID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneCourse", ctx, courseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneCourse indicates an expected call of DeleteOneCourse.
func (mr *MockIFaceRepositoryMockRecorder) DeleteOneCourse(ctx, courseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneCourse", reflect.TypeOf((*MockIFaceRepository)(nil).DeleteOneCourse), ctx, courseID)
}

// FindListCategory mocks base method.
func (m *MockIFaceRepository) FindListCategory(ctx context.Context, params *request.ListCategoryRequest) ([]model.Category, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListCategory", ctx, params)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindListCategory indicates an expected call of FindListCategory.
func (mr *MockIFaceRepositoryMockRecorder) FindListCategory(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListCategory", reflect.TypeOf((*MockIFaceRepository)(nil).FindListCategory), ctx, params)
}

// FindListCourse mocks base method.
func (m *MockIFaceRepository) FindListCourse(ctx context.Context, params *request.ListCourseRequest) ([]model.Course, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListCourse", ctx, params)
	ret0, _ := ret[0].([]model.Course)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindListCourse indicates an expected call of FindListCourse.
func (mr *MockIFaceRepositoryMockRecorder) FindListCourse(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListCourse", reflect.TypeOf((*MockIFaceRepository)(nil).FindListCourse), ctx, params)
}

// FindOneCategory mocks base method.
func (m *MockIFaceRepository) FindOneCategory(ctx context.Context, categoryID int) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneCategory", ctx, categoryID)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneCategory indicates an expected call of FindOneCategory.
func (mr *MockIFaceRepositoryMockRecorder) FindOneCategory(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneCategory", reflect.TypeOf((*MockIFaceRepository)(nil).FindOneCategory), ctx, categoryID)
}

// FindOneCertificate mocks base method.
func (m *MockIFaceRepository) FindOneCertificate(ctx context.Context, query ...any) (*model.Certificate, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range query {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneCertificate", varargs...)
	ret0, _ := ret[0].(*model.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneCertificate indicates an expected call of FindOneCertificate.
func (mr *MockIFaceRepositoryMockRecorder) FindOneCertificate(ctx any, query ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, query...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneCertificate", reflect.TypeOf((*MockIFaceRepository)(nil).FindOneCertificate), varargs...)
}

// FindOneCourse mocks base method.
func (m *MockIFaceRepository) FindOneCourse(ctx context.Context, courseID string) (*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneCourse", ctx, courseID)
	ret0, _ := ret[0].(*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneCourse indicates an expected call of FindOneCourse.
func (mr *MockIFaceRepositoryMockRecorder) FindOneCourse(ctx, courseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneCourse", reflect.TypeOf((*MockIFaceRepository)(nil).FindOneCourse), ctx, courseID)
}

// FindOneUser mocks base method.
func (m *MockIFaceRepository) FindOneUser(ctx context.Context, query ...any) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range query {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneUser", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUser indicates an expected call of FindOneUser.
func (mr *MockIFaceRepositoryMockRecorder) FindOneUser(ctx any, query ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, query...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUser", reflect.TypeOf((*MockIFaceRepository)(nil).FindOneUser), varargs...)
}

// UpdateCourse mocks base method.
func (m *MockIFaceRepository) UpdateCourse(ctx context.Context, data *model.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockIFaceRepositoryMockRecorder) UpdateCourse(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockIFaceRepository)(nil).UpdateCourse), ctx, data)
}

// UpdateUser mocks base method.
func (m *MockIFaceRepository) UpdateUser(ctx context.Context, data *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIFaceRepositoryMockRecorder) UpdateUser(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIFaceRepository)(nil).UpdateUser), ctx, data)
}
